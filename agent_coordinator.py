#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∂–∏–∑–Ω–∏
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –∏–∑–±–µ–∂–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import json
import sqlite3
import time
import random
from datetime import datetime, timedelta
from typing import List, Dict, Set, Optional, Tuple
from pathlib import Path
import hashlib


class AgentCoordinator:
    """–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ PubMed –ø–æ —Ç–µ–º–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∂–∏–∑–Ω–∏"""
    
    def __init__(self, db_path: str = "longevity_research.db", config_path: str = "longevity_config.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
        
        Args:
            db_path: –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
            config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        self.db_path = db_path
        self.config_path = config_path
        self.config = self._load_config()
        self._init_database()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.current_session_id = self._create_session()
        self.processed_queries = set()
        self.failed_queries = set()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_articles_found = 0
        self.total_pdfs_downloaded = 0
        self.session_start_time = datetime.now()
    
    def _load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        default_config = {
            "research_themes": [
                "longevity_genetics",
                "aging_interventions", 
                "life_extension_drugs",
                "cellular_senescence",
                "telomeres_aging",
                "caloric_restriction",
                "anti_aging_compounds",
                "regenerative_medicine",
                "biomarkers_aging",
                "aging_mechanisms"
            ],
            "query_templates": {
                "longevity_genetics": [
                    "longevity genes human",
                    "genetic factors life extension",
                    "FOXO3 longevity genetics",
                    "APOE longevity variants",
                    "centenarian genetics study"
                ],
                "aging_interventions": [
                    "life extension interventions",
                    "anti-aging therapies clinical",
                    "longevity interventions human",
                    "aging reversal therapies",
                    "lifespan extension methods"
                ],
                "life_extension_drugs": [
                    "metformin anti-aging effects",
                    "rapamycin longevity studies",
                    "resveratrol life extension",
                    "NAD+ precursors aging",
                    "senolytics aging drugs"
                ],
                "cellular_senescence": [
                    "cellular senescence aging",
                    "senescent cells clearing",
                    "p16 senescence biomarker",
                    "SASP aging inflammation",
                    "senolytic drugs research"
                ],
                "telomeres_aging": [
                    "telomeres aging longevity",
                    "telomerase activation therapy",
                    "telomere length aging",
                    "TA-65 telomerase activator",
                    "telomere shortening interventions"
                ],
                "caloric_restriction": [
                    "caloric restriction longevity",
                    "intermittent fasting aging",
                    "CR mimetics anti-aging",
                    "dietary restriction lifespan",
                    "fasting longevity effects"
                ],
                "anti_aging_compounds": [
                    "spermidine anti-aging effects",
                    "quercetin aging intervention",
                    "curcumin longevity studies",
                    "NMN aging supplement",
                    "astragalus anti-aging"
                ],
                "regenerative_medicine": [
                    "stem cells aging therapy",
                    "tissue regeneration aging",
                    "pluripotent stem cells longevity",
                    "regenerative medicine aging",
                    "cell therapy anti-aging"
                ],
                "biomarkers_aging": [
                    "biological age biomarkers",
                    "aging clock epigenetic",
                    "inflammaging biomarkers",
                    "longevity biomarkers human",
                    "aging assessment tests"
                ],
                "aging_mechanisms": [
                    "hallmarks of aging",
                    "mitochondrial aging theory",
                    "oxidative stress aging",
                    "protein aggregation aging",
                    "DNA damage aging mechanisms"
                ]
            },
            "search_settings": {
                "max_results_per_query": 50,
                "date_range_years": 5,
                "min_articles_per_theme": 20,
                "max_queries_per_session": 100
            },
            "priorities": {
                "recent_research": 0.4,
                "clinical_trials": 0.3,
                "review_articles": 0.2,
                "basic_research": 0.1
            }
        }
        
        try:
            if Path(self.config_path).exists():
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
                    default_config.update(loaded_config)
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                with open(self.config_path, 'w', encoding='utf-8') as f:
                    json.dump(default_config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        
        return default_config
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Å—Å–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS sessions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    start_time TEXT NOT NULL,
                    end_time TEXT,
                    total_queries INTEGER DEFAULT 0,
                    total_articles INTEGER DEFAULT 0,
                    total_pdfs INTEGER DEFAULT 0,
                    status TEXT DEFAULT 'active'
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS queries (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    session_id INTEGER,
                    query_hash TEXT UNIQUE,
                    query_text TEXT NOT NULL,
                    theme TEXT NOT NULL,
                    timestamp TEXT NOT NULL,
                    articles_found INTEGER DEFAULT 0,
                    pdfs_downloaded INTEGER DEFAULT 0,
                    status TEXT DEFAULT 'pending',
                    error_message TEXT,
                    FOREIGN KEY (session_id) REFERENCES sessions (id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS articles (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    query_id INTEGER,
                    pmid TEXT UNIQUE,
                    title TEXT,
                    authors TEXT,
                    journal TEXT,
                    publication_date TEXT,
                    doi TEXT,
                    abstract TEXT,
                    keywords TEXT,
                    pdf_url TEXT,
                    pdf_downloaded INTEGER DEFAULT 0,
                    pdf_path TEXT,
                    relevance_score REAL,
                    timestamp TEXT NOT NULL,
                    FOREIGN KEY (query_id) REFERENCES queries (id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ç–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏ –∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS theme_progress (
                    theme TEXT PRIMARY KEY,
                    total_queries INTEGER DEFAULT 0,
                    total_articles INTEGER DEFAULT 0,
                    last_updated TEXT,
                    completion_status TEXT DEFAULT 'active'
                )
            ''')
            
            conn.commit()
    
    def _create_session(self) -> int:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO sessions (start_time) VALUES (?)",
                (datetime.now().isoformat(),)
            )
            session_id = cursor.lastrowid
            conn.commit()
        
        print(f"üöÄ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {session_id}")
        return session_id
    
    def _generate_query_hash(self, query: str, theme: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        content = f"{query.lower().strip()}_{theme}"
        return hashlib.md5(content.encode()).hexdigest()
    
    def get_next_queries(self, count: int = 5) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        Args:
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø—Ä–æ—Å–∞—Ö
        """
        queries = []
        themes_progress = self._get_themes_progress()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ç–µ–º—ã (—Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç–∞—Ç–µ–π)
        priority_themes = sorted(
            themes_progress.keys(),
            key=lambda t: themes_progress[t]['total_articles']
        )
        
        for theme in priority_themes:
            if len(queries) >= count:
                break
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –ª–∏–º–∏—Ç –¥–ª—è —Ç–µ–º—ã
            if themes_progress[theme]['total_articles'] >= self.config["search_settings"]["min_articles_per_theme"]:
                continue
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–º—ã
            theme_queries = self._generate_queries_for_theme(theme, count - len(queries))
            queries.extend(theme_queries)
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑ –ª—é–±—ã—Ö —Ç–µ–º
        if len(queries) < count:
            for theme in random.sample(priority_themes, min(len(priority_themes), 3)):
                if len(queries) >= count:
                    break
                additional_queries = self._generate_queries_for_theme(theme, count - len(queries))
                queries.extend(additional_queries)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        for query_info in queries:
            self._save_query_to_db(query_info)
        
        return queries[:count]
    
    def _get_themes_progress(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ç–µ–º–∞–º"""
        progress = {}
        
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT theme, total_articles FROM theme_progress")
            results = cursor.fetchall()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ç–µ–º—ã
        for theme in self.config["research_themes"]:
            progress[theme] = {'total_articles': 0, 'total_queries': 0}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
        for theme, articles in results:
            if theme in progress:
                progress[theme]['total_articles'] = articles
        
        return progress
    
    def _generate_queries_for_theme(self, theme: str, max_count: int) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã"""
        queries = []
        
        if theme not in self.config["query_templates"]:
            return queries
        
        base_queries = self.config["query_templates"][theme]
        date_range = self._get_date_range()
        
        for base_query in base_queries:
            if len(queries) >= max_count:
                break
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
            variations = self._create_query_variations(base_query, theme)
            
            for variation in variations:
                if len(queries) >= max_count:
                    break
                
                query_hash = self._generate_query_hash(variation, theme)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å
                if not self._is_query_processed(query_hash):
                    query_info = {
                        'query': variation,
                        'theme': theme,
                        'hash': query_hash,
                        'date_from': date_range['from'],
                        'date_to': date_range['to'],
                        'max_results': self.config["search_settings"]["max_results_per_query"],
                        'priority': self._calculate_query_priority(variation, theme)
                    }
                    queries.append(query_info)
        
        return queries
    
    def _create_query_variations(self, base_query: str, theme: str) -> List[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–π –±–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        variations = [base_query]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
        modifiers = {
            'clinical': [' clinical trial', ' human study', ' clinical research'],
            'recent': [' 2020:2024[PDAT]', ' recent studies'],
            'review': [' systematic review', ' meta-analysis', ' review'],
            'mechanism': [' mechanism', ' pathway', ' molecular'],
            'intervention': [' intervention', ' treatment', ' therapy']
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–π –≤–∞—Ä–∏–∞—Ü–∏–∏ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
        for mod_type, mod_list in modifiers.items():
            if len(variations) >= 3:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞—Ü–∏–π
                break
            modifier = random.choice(mod_list)
            if modifier not in base_query.lower():
                variations.append(base_query + modifier)
        
        return variations
    
    def _get_date_range(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        end_date = datetime.now()
        start_date = end_date - timedelta(days=365 * self.config["search_settings"]["date_range_years"])
        
        return {
            'from': start_date.strftime("%Y/%m/%d"),
            'to': end_date.strftime("%Y/%m/%d")
        }
    
    def _calculate_query_priority(self, query: str, theme: str) -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        priority = 0.5  # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        
        # –ü–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
        if any(term in query.lower() for term in ['clinical', 'trial', 'human']):
            priority += self.config["priorities"]["clinical_trials"]
        
        # –ü–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π  
        if any(term in query.lower() for term in ['recent', '2020', '2021', '2022', '2023', '2024']):
            priority += self.config["priorities"]["recent_research"]
        
        # –ü–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ–±–∑–æ—Ä–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
        if any(term in query.lower() for term in ['review', 'meta-analysis']):
            priority += self.config["priorities"]["review_articles"]
        
        return min(priority, 1.0)
    
    def _is_query_processed(self, query_hash: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM queries WHERE query_hash = ?", (query_hash,))
            return cursor.fetchone()[0] > 0
    
    def _save_query_to_db(self, query_info: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR IGNORE INTO queries 
                (session_id, query_hash, query_text, theme, timestamp)
                VALUES (?, ?, ?, ?, ?)
            ''', (
                self.current_session_id,
                query_info['hash'],
                query_info['query'],
                query_info['theme'],
                datetime.now().isoformat()
            ))
            conn.commit()
    
    def report_query_results(self, query_hash: str, articles: List[Dict], 
                           pdfs_downloaded: int = 0, error: str = None):
        """
        –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            query_hash: –•–µ—à –∑–∞–ø—Ä–æ—Å–∞
            articles: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
            pdfs_downloaded: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö PDF
            error: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        """
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
            status = 'error' if error else 'completed'
            cursor.execute('''
                UPDATE queries 
                SET articles_found = ?, pdfs_downloaded = ?, status = ?, error_message = ?
                WHERE query_hash = ?
            ''', (len(articles), pdfs_downloaded, status, error, query_hash))
            
            # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø—Ä–æ—Å–∞
            cursor.execute("SELECT id, theme FROM queries WHERE query_hash = ?", (query_hash,))
            result = cursor.fetchone()
            if not result:
                return
            
            query_id, theme = result
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—å–∏
            for article in articles:
                self._save_article_to_db(cursor, query_id, article)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–º—ã
            self._update_theme_progress(cursor, theme, len(articles))
            
            conn.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
        self.total_articles_found += len(articles)
        self.total_pdfs_downloaded += pdfs_downloaded
        
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å {query_hash[:8]}... –∑–∞–≤–µ—Ä—à–µ–Ω: {len(articles)} —Å—Ç–∞—Ç–µ–π, {pdfs_downloaded} PDF")
    
    def _save_article_to_db(self, cursor, query_id: int, article: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        cursor.execute('''
            INSERT OR IGNORE INTO articles 
            (query_id, pmid, title, authors, journal, publication_date, 
             doi, abstract, keywords, timestamp)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            query_id,
            article.get('pmid', ''),
            article.get('title', ''),
            json.dumps(article.get('authors', []), ensure_ascii=False),
            article.get('journal', ''),
            article.get('publication_date', ''),
            article.get('doi', ''),
            article.get('abstract', ''),
            json.dumps(article.get('keywords', []), ensure_ascii=False),
            datetime.now().isoformat()
        ))
    
    def _update_theme_progress(self, cursor, theme: str, new_articles: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ–º—ã"""
        cursor.execute('''
            INSERT OR REPLACE INTO theme_progress 
            (theme, total_articles, last_updated)
            VALUES (
                ?, 
                COALESCE((SELECT total_articles FROM theme_progress WHERE theme = ?), 0) + ?,
                ?
            )
        ''', (theme, theme, new_articles, datetime.now().isoformat()))
    
    def get_session_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            cursor.execute('''
                SELECT COUNT(*), 
                       SUM(articles_found), 
                       SUM(pdfs_downloaded),
                       COUNT(CASE WHEN status = 'completed' THEN 1 END),
                       COUNT(CASE WHEN status = 'error' THEN 1 END)
                FROM queries WHERE session_id = ?
            ''', (self.current_session_id,))
            
            query_stats = cursor.fetchone()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º
            cursor.execute('''
                SELECT theme, COUNT(*), SUM(articles_found) 
                FROM queries WHERE session_id = ? 
                GROUP BY theme
            ''', (self.current_session_id,))
            
            theme_stats = cursor.fetchall()
        
        runtime = datetime.now() - self.session_start_time
        
        return {
            'session_id': self.current_session_id,
            'runtime': str(runtime),
            'total_queries': query_stats[0] or 0,
            'total_articles': query_stats[1] or 0,
            'total_pdfs': query_stats[2] or 0,
            'completed_queries': query_stats[3] or 0,
            'failed_queries': query_stats[4] or 0,
            'themes': {theme: {'queries': queries, 'articles': articles or 0} 
                      for theme, queries, articles in theme_stats}
        }
    
    def get_research_recommendations(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        recommendations = []
        themes_progress = self._get_themes_progress()
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–¥–æ–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
        for theme, progress in themes_progress.items():
            if progress['total_articles'] < self.config["search_settings"]["min_articles_per_theme"]:
                recommendations.append({
                    'type': 'underresearched_theme',
                    'theme': theme,
                    'current_articles': progress['total_articles'],
                    'target_articles': self.config["search_settings"]["min_articles_per_theme"],
                    'priority': 'high'
                })
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT theme, AVG(articles_found) as avg_articles
                FROM queries 
                WHERE status = 'completed' AND articles_found > 0
                GROUP BY theme
                ORDER BY avg_articles DESC
            ''')
            
            productive_themes = cursor.fetchall()
        
        for theme, avg_articles in productive_themes[:3]:
            recommendations.append({
                'type': 'expand_productive_theme',
                'theme': theme,
                'avg_articles_per_query': round(avg_articles, 1),
                'priority': 'medium'
            })
        
        return recommendations
    
    def close_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE sessions 
                SET end_time = ?, total_queries = ?, total_articles = ?, total_pdfs = ?, status = ?
                WHERE id = ?
            ''', (
                datetime.now().isoformat(),
                self.get_session_stats()['total_queries'],
                self.total_articles_found,
                self.total_pdfs_downloaded,
                'completed',
                self.current_session_id
            ))
            conn.commit()
        
        print(f"üèÅ –°–µ—Å—Å–∏—è {self.current_session_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
    coordinator = AgentCoordinator()
    
    print("üß† –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ö–û–û–†–î–ò–ù–ê–¢–û–†–ê –ú–£–õ–¨–¢–ò–ê–ì–ï–ù–¢–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    queries = coordinator.get_next_queries(3)
    
    print(f"\nüìã –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(queries)} –∑–∞–ø—Ä–æ—Å–æ–≤:")
    for i, query in enumerate(queries, 1):
        print(f"{i}. –¢–µ–º–∞: {query['theme']}")
        print(f"   –ó–∞–ø—Ä–æ—Å: {query['query']}")
        print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {query['priority']:.2f}")
        print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = coordinator.get_session_stats()
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:")
    print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_queries']}")
    print(f"   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats['runtime']}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = coordinator.get_research_recommendations()
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({len(recommendations)}):")
    for rec in recommendations[:3]:
        print(f"   - {rec['type']}: {rec['theme']} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {rec['priority']})")
    
    coordinator.close_session() 