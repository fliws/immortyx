#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π
"""

import time
from pathlib import Path
from longevity_research_system import LongevityResearchSystem


def example_basic_research_session():
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏"""
    print("üß¨ –ë–ê–ó–û–í–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –î–û–õ–ì–û–õ–ï–¢–ò–Ø")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    system = LongevityResearchSystem(
        email="your_email@example.com",  # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π email
        config_path="example_config.json",
        db_path="example_research.db",
        pdf_dir="example_pdfs"
    )
    
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å–µ—Å—Å–∏—é...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    stats = system.run_research_session(
        max_queries=5,                    # –ù–µ–±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        download_pdfs=True,               # –°–∫–∞—á–∏–≤–∞–µ–º PDF
        target_articles_per_theme=5,      # –¶–µ–ª—å - 5 —Å—Ç–∞—Ç–µ–π –Ω–∞ —Ç–µ–º—É
        session_name="Demo Session 1"
    )
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Å—Å–∏–∏:")
    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('queries_processed', 0)}")
    print(f"   –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {stats.get('articles_found', 0)}")
    print(f"   –°–∫–∞—á–∞–Ω–æ PDF: {stats.get('pdfs_downloaded', 0)}")
    
    return stats


def example_focused_research():
    """–ü—Ä–∏–º–µ—Ä —Ü–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–µ–º"""
    print("\nüéØ –¶–ï–õ–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ù–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    custom_config = {
        "research_themes": [
            "life_extension_drugs",
            "cellular_senescence", 
            "telomeres_aging"
        ],
        "query_templates": {
            "life_extension_drugs": [
                "metformin longevity clinical trial",
                "rapamycin aging intervention human",
                "resveratrol life extension study",
                "NAD+ precursors aging effects"
            ],
            "cellular_senescence": [
                "senolytic drugs human trials",
                "dasatinib quercetin aging",
                "senescent cells clearance therapy"
            ],
            "telomeres_aging": [
                "telomerase activation longevity",
                "telomere length aging biomarker",
                "TA-65 human studies"
            ]
        },
        "search_settings": {
            "max_results_per_query": 30,
            "date_range_years": 3,
            "min_articles_per_theme": 10,
            "max_queries_per_session": 50
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    import json
    with open("focused_config.json", "w", encoding="utf-8") as f:
        json.dump(custom_config, f, indent=2, ensure_ascii=False)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    system = LongevityResearchSystem(
        config_path="focused_config.json",
        db_path="focused_research.db",
        pdf_dir="focused_pdfs",
        email="your_email@example.com"
    )
    
    print("üî¨ –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ...")
    
    stats = system.run_research_session(
        max_queries=10,
        download_pdfs=True,
        target_articles_per_theme=10,
        session_name="Focused Research"
    )
    
    return stats


def example_progressive_research():
    """–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–µ—Å—Å–∏—è–º–∏"""
    print("\n‚ö° –ü–†–û–ì–†–ï–°–°–ò–í–ù–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï")
    print("=" * 35)
    
    system = LongevityResearchSystem(
        email="your_email@example.com",
        config_path="progressive_config.json",
        db_path="progressive_research.db",
        pdf_dir="progressive_pdfs"
    )
    
    # –°–µ—Å—Å–∏—è 1: –†–∞–∑–≤–µ–¥—ã–≤–∞—Ç–µ–ª—å–Ω–∞—è
    print("üïµÔ∏è –°–µ—Å—Å–∏—è 1: –†–∞–∑–≤–µ–¥—ã–≤–∞—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
    stats1 = system.run_research_session(
        max_queries=8,
        download_pdfs=False,  # –ù–µ —Å–∫–∞—á–∏–≤–∞–µ–º PDF –Ω–∞ —Ä–∞–∑–≤–µ–¥—ã–≤–∞—Ç–µ–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ
        target_articles_per_theme=3,
        session_name="Reconnaissance"
    )
    
    time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏
    print("\nüí° –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
    recommendations = system.coordinator.get_research_recommendations()
    
    print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
    for i, rec in enumerate(recommendations[:3], 1):
        print(f"  {i}. {rec['type']}: {rec['theme']} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {rec['priority']})")
    
    # –°–µ—Å—Å–∏—è 2: –¶–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    print(f"\nüéØ –°–µ—Å—Å–∏—è 2: –¶–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    stats2 = system.run_research_session(
        max_queries=12,
        download_pdfs=True,  # –¢–µ–ø–µ—Ä—å —Å–∫–∞—á–∏–≤–∞–µ–º PDF
        target_articles_per_theme=8,
        session_name="Targeted Research"
    )
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_queries = stats1.get('queries_processed', 0) + stats2.get('queries_processed', 0)
    total_articles = stats1.get('articles_found', 0) + stats2.get('articles_found', 0)
    total_pdfs = stats1.get('pdfs_downloaded', 0) + stats2.get('pdfs_downloaded', 0)
    
    print(f"\nüèÜ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–ì–†–ï–°–°–ò–í–ù–û–ì–û –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:")
    print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_queries}")
    print(f"   –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {total_articles}")
    print(f"   –í—Å–µ–≥–æ PDF: {total_pdfs}")
    
    return {"stats1": stats1, "stats2": stats2}


def example_analysis_and_export():
    """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –ê–ù–ê–õ–ò–ó –ò –≠–ö–°–ü–û–†–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 35)
    
    system = LongevityResearchSystem(
        email="your_email@example.com",
        config_path="analysis_config.json",
        db_path="analysis_research.db",
        pdf_dir="analysis_pdfs"
    )
    
    # –ü—Ä–æ–≤–æ–¥–∏–º –Ω–µ–±–æ–ª—å—à–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
    print("üî¨ –ü—Ä–æ–≤–æ–¥–∏–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
    stats = system.run_research_session(
        max_queries=6,
        download_pdfs=True,
        target_articles_per_theme=4,
        session_name="Analysis Demo"
    )
    
    print("\nüìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PDF —Ñ–∞–π–ª–∞—Ö
    pdf_info = system.parser.get_downloaded_pdfs_info()
    if pdf_info:
        print(f"\nüìÅ –°–∫–∞—á–∞–Ω–Ω—ã–µ PDF —Ñ–∞–π–ª—ã ({len(pdf_info)}):")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–µ–º–∞–º
        themes = {}
        for info in pdf_info:
            theme = info['theme']
            if theme not in themes:
                themes[theme] = []
            themes[theme].append(info)
        
        for theme, files in themes.items():
            print(f"  üìÇ {theme.replace('_', ' ').title()}: {len(files)} —Ñ–∞–π–ª–æ–≤")
            total_size = sum(f['size_mb'] for f in files)
            print(f"     –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:.1f} MB")
    
    # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
    
    # –ò–º–∏—Ç–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –≤—ã–∑–æ–≤–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é)
    import sqlite3
    import json
    from datetime import datetime
    
    try:
        with sqlite3.connect(system.coordinator.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT a.pmid, a.title, a.authors, a.journal, a.publication_date,
                       a.doi, a.abstract, q.theme
                FROM articles a
                JOIN queries q ON a.query_id = q.id
                ORDER BY a.timestamp DESC
            ''')
            
            articles = []
            for row in cursor.fetchall():
                articles.append({
                    'pmid': row[0],
                    'title': row[1],
                    'authors': json.loads(row[2]) if row[2] else [],
                    'journal': row[3],
                    'publication_date': row[4],
                    'doi': row[5],
                    'abstract': row[6],
                    'theme': row[7]
                })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        export_file = f"longevity_analysis_{timestamp}.json"
        
        with open(export_file, 'w', encoding='utf-8') as f:
            json.dump(articles, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {export_file}")
        print(f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π")
        
        # –ö—Ä–∞—Ç–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        if articles:
            themes_count = {}
            journals_count = {}
            
            for article in articles:
                theme = article['theme']
                journal = article['journal']
                
                themes_count[theme] = themes_count.get(theme, 0) + 1
                if journal:
                    journals_count[journal] = journals_count.get(journal, 0) + 1
            
            print(f"\nüìà –ö—Ä–∞—Ç–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:")
            print(f"   –°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è —Ç–µ–º–∞: {max(themes_count, key=themes_count.get)} ({max(themes_count.values())} —Å—Ç–∞—Ç–µ–π)")
            if journals_count:
                print(f"   –¢–æ–ø –∂—É—Ä–Ω–∞–ª: {max(journals_count, key=journals_count.get)} ({max(journals_count.values())} —Å—Ç–∞—Ç–µ–π)")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    
    return stats


def example_cleanup_and_maintenance():
    """–ü—Ä–∏–º–µ—Ä –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏ –æ—á–∏—Å—Ç–∫–∏"""
    print("\nüßπ –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´")
    print("=" * 30)
    
    system = LongevityResearchSystem(
        email="your_email@example.com",
        config_path="maintenance_config.json", 
        db_path="maintenance_research.db",
        pdf_dir="maintenance_pdfs"
    )
    
    # –ü—Ä–æ–≤–æ–¥–∏–º –Ω–µ–±–æ–ª—å—à–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    print("üî¨ –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è...")
    system.run_research_session(
        max_queries=3,
        download_pdfs=True,
        session_name="Maintenance Demo"
    )
    
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = system.coordinator.get_session_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤: {stats['total_queries']}")
    print(f"   –°—Ç–∞—Ç–µ–π: {stats['total_articles']}")
    print(f"   PDF: {stats['total_pdfs']}")
    
    # –û—á–∏—Å—Ç–∫–∞ –±–∏—Ç—ã—Ö PDF
    print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ –±–∏—Ç—ã—Ö PDF —Ñ–∞–π–ª–æ–≤...")
    cleaned = system.parser.cleanup_failed_downloads()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PDF
    pdf_info = system.parser.get_downloaded_pdfs_info()
    if pdf_info:
        total_size = sum(info['size_mb'] for info in pdf_info)
        print(f"üìÅ PDF —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –§–∞–π–ª–æ–≤: {len(pdf_info)}")
        print(f"   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:.1f} MB")
        print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {total_size/len(pdf_info):.1f} MB")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é
    recommendations = system.coordinator.get_research_recommendations()
    if recommendations:
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:")
        for i, rec in enumerate(recommendations[:3], 1):
            print(f"   {i}. {rec['type'].replace('_', ' ').title()}")
            print(f"      –¢–µ–º–∞: {rec['theme'].replace('_', ' ').title()}")
            print(f"      –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {rec['priority'].upper()}")
    
    return stats


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"""
    print("üß¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–£–õ–¨–¢–ò–ê–ì–ï–ù–¢–ù–û–ô –°–ò–°–¢–ï–ú–´ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø –î–û–õ–ì–û–õ–ï–¢–ò–Ø")
    print("‚ïê" * 70)
    print()
    print("–≠—Ç–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∫–∞–∂–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:")
    print("1. –ë–∞–∑–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
    print("2. –¶–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ") 
    print("3. –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
    print("4. –ê–Ω–∞–ª–∏–∑ –∏ —ç–∫—Å–ø–æ—Ä—Ç")
    print("5. –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
    print()
    
    try:
        # –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        example_basic_research_session()
        time.sleep(2)
        
        # –ü—Ä–∏–º–µ—Ä 2: –¶–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        example_focused_research()
        time.sleep(2)
        
        # –ü—Ä–∏–º–µ—Ä 3: –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        example_progressive_research()
        time.sleep(2)
        
        # –ü—Ä–∏–º–µ—Ä 4: –ê–Ω–∞–ª–∏–∑ –∏ —ç–∫—Å–ø–æ—Ä—Ç
        example_analysis_and_export()
        time.sleep(2)
        
        # –ü—Ä–∏–º–µ—Ä 5: –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
        example_cleanup_and_maintenance()
        
        print(f"\nüéâ –í–°–ï –ü–†–ò–ú–ï–†–´ –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("=" * 50)
        print("üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        created_files = [
            "example_config.json", "example_research.db", "example_pdfs/",
            "focused_config.json", "focused_research.db", "focused_pdfs/",
            "progressive_config.json", "progressive_research.db", "progressive_pdfs/",
            "analysis_config.json", "analysis_research.db", "analysis_pdfs/",
            "maintenance_config.json", "maintenance_research.db", "maintenance_pdfs/"
        ]
        
        for file_path in created_files:
            if Path(file_path).exists():
                if file_path.endswith('/'):
                    pdf_count = len(list(Path(file_path).glob("**/*.pdf")))
                    print(f"   üìÇ {file_path} ({pdf_count} PDF —Ñ–∞–π–ª–æ–≤)")
                else:
                    size = Path(file_path).stat().st_size
                    print(f"   üìÑ {file_path} ({size} –±–∞–π—Ç)")
        
        print(f"\nüí° –î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("   python longevity_research_system.py --interactive")
        
    except KeyboardInterrupt:
        print("\n‚õî –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main() 