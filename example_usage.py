#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ PubMed
"""

from pubmed_parser import PubMedParser
import time


def example_basic_search():
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π"""
    print("\nüîç –ë–ê–ó–û–í–´–ô –ü–û–ò–°–ö –°–¢–ê–¢–ï–ô")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π email)
    parser = PubMedParser(email="your_email@example.com")
    
    # –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π –æ COVID-19
    query = "COVID-19 vaccine effectiveness"
    articles = parser.search_and_fetch(query, max_results=5)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for i, article in enumerate(articles, 1):
        print(f"\n{i}. {article['title']}")
        print(f"   –ê–≤—Ç–æ—Ä—ã: {', '.join(article['authors'][:3])}{'...' if len(article['authors']) > 3 else ''}")
        print(f"   –ñ—É—Ä–Ω–∞–ª: {article['journal']}")
        print(f"   –î–∞—Ç–∞: {article['publication_date']}")
        print(f"   PMID: {article['pmid']}")
    
    return articles


def example_date_filter():
    """–ü—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–∞—Ç–µ"""
    print("\nüìÖ –ü–û–ò–°–ö –° –§–ò–õ–¨–¢–†–û–ú –ü–û –î–ê–¢–ï")
    print("=" * 50)
    
    parser = PubMedParser(email="your_email@example.com")
    
    # –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥
    query = "artificial intelligence diagnosis"
    articles = parser.search_and_fetch(
        query=query,
        max_results=3,
        date_from="2023/01/01",
        date_to="2024/12/31"
    )
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π –∑–∞ 2023-2024 –≥–æ–¥—ã")
    for article in articles:
        print(f"- {article['title']} ({article['publication_date']})")
    
    return articles


def example_specific_pmids():
    """–ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º PMID"""
    print("\nüéØ –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ï–ô –ü–û PMID")
    print("=" * 50)
    
    parser = PubMedParser(email="your_email@example.com")
    
    # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ PMID —Å—Ç–∞—Ç–µ–π
    pmids = ["38704809", "38704550", "38704392"]
    
    articles = parser.get_article_details(pmids)
    
    for article in articles:
        print(f"\nPMID: {article['pmid']}")
        print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {article['title']}")
        print(f"DOI: {article['doi']}")
        print(f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(article['keywords'][:5])}")
    
    return articles


def example_save_results():
    """–ü—Ä–∏–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
    print("\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 50)
    
    parser = PubMedParser(email="your_email@example.com")
    
    # –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π
    query = "machine learning medical imaging"
    articles = parser.search_and_fetch(query, max_results=5)
    
    if articles:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        parser.save_to_json(articles, "ml_medical_imaging.json")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
        parser.save_to_csv(articles, "ml_medical_imaging.csv")
        
        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π –≤ JSON –∏ CSV —Ñ–æ—Ä–º–∞—Ç–∞—Ö")
    
    return articles


def example_custom_search():
    """–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    print("\nüî¨ –ü–†–û–î–í–ò–ù–£–¢–´–ô –ü–û–ò–°–ö")
    print("=" * 50)
    
    parser = PubMedParser(email="your_email@example.com")
    
    # –°–ª–æ–∂–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    queries = [
        "deep learning AND medical imaging AND cancer detection",
        "CRISPR gene therapy clinical trial",
        "telemedicine rural healthcare access"
    ]
    
    all_results = {}
    
    for query in queries:
        print(f"\n–ü–æ–∏—Å–∫: {query}")
        articles = parser.search_and_fetch(query, max_results=3)
        all_results[query] = articles
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π")
        if articles:
            print(f"–ü—Ä–∏–º–µ—Ä: {articles[0]['title'][:80]}...")
    
    return all_results


def example_analysis():
    """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π"""
    print("\nüìä –ê–ù–ê–õ–ò–ó –°–¢–ê–¢–ï–ô")
    print("=" * 50)
    
    parser = PubMedParser(email="your_email@example.com")
    
    # –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π
    query = "cancer immunotherapy"
    articles = parser.search_and_fetch(query, max_results=20)
    
    if not articles:
        print("–°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –ê–Ω–∞–ª–∏–∑ –∂—É—Ä–Ω–∞–ª–æ–≤
    journals = {}
    for article in articles:
        journal = article['journal']
        if journal:
            journals[journal] = journals.get(journal, 0) + 1
    
    print("üì∞ –¢–æ–ø –∂—É—Ä–Ω–∞–ª–æ–≤:")
    for journal, count in sorted(journals.items(), key=lambda x: x[1], reverse=True)[:5]:
        print(f"  {journal}: {count} —Å—Ç–∞—Ç–µ–π")
    
    # –ê–Ω–∞–ª–∏–∑ –≥–æ–¥–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    years = {}
    for article in articles:
        pub_date = article['publication_date']
        if pub_date and '-' in pub_date:
            year = pub_date.split('-')[0]
            if year.isdigit():
                years[year] = years.get(year, 0) + 1
    
    print("\nüìÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ–¥–∞–º:")
    for year, count in sorted(years.items(), reverse=True)[:5]:
        print(f"  {year}: {count} —Å—Ç–∞—Ç–µ–π")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    all_keywords = []
    for article in articles:
        all_keywords.extend(article.get('keywords', []))
    
    keyword_freq = {}
    for keyword in all_keywords:
        keyword_freq[keyword] = keyword_freq.get(keyword, 0) + 1
    
    print("\nüîë –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:")
    for keyword, count in sorted(keyword_freq.items(), key=lambda x: x[1], reverse=True)[:10]:
        print(f"  {keyword}: {count} —Ä–∞–∑")


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"""
    print("üß¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–ê–†–°–ï–†–ê PUBMED")
    print("‚ïê" * 50)
    
    try:
        # –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫
        example_basic_search()
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        # –ü–æ–∏—Å–∫ —Å –¥–∞—Ç–∞–º–∏
        example_date_filter()
        time.sleep(1)
        
        # –ü–æ–∏—Å–∫ –ø–æ PMID
        example_specific_pmids()
        time.sleep(1)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        example_save_results()
        time.sleep(1)
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫
        example_custom_search()
        time.sleep(1)
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–µ–π
        example_analysis()
        
        print("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except KeyboardInterrupt:
        print("\n‚õî –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main() 